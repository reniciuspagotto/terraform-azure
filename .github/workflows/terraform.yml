name: 'Infrastructure Deployment'

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./tf

    env:
      BACKEND_STORAGE_RESOURCE_GROUP: General
      BACKEND_STORAGE_ACCOUNT_NAME: pgoincterraform
      BACKEND_STORAGE_CONTAINER_NAME: tfstate
      BACKEND_STATE_NAME: pgoinc.tfstate
      # BACKEND_STORAGE_ACCESS_KEY : ${{ secrets.TERRAFORM_STORAGE_ACCESS_KEY }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.3.9"

    - name: Login Azure
      env:
        AAD_SERVICE_PRINCIPAL_CLIENT_ID: ${{ secrets.SP_CLIENT_ID }}
        AAD_SERVICE_PRINCIPAL_CLIENT_SECRET: ${{ secrets.SP_CLIENT_SECRET }}
      run: |
        az login --service-principal -u ${{ secrets.SP_CLIENT_ID }} -p ${{ secrets.SP_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set -s ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        az account show

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    # - name: Terraform Init
    #   run: terraform init -upgrade -input=false -backend-config=key="$TERRAFORM_STATE_NAME" -backend-config=storage_account_name="$BACKEND_STORAGE_ACCOUNT_NAME" -backend-config=container_name="$BACKEND_STORAGE_CONTAINER_NAME" -backend-config=access_key="$BACKEND_STORAGE_ACCESS_KEY"

    - name: Terraform Init
      run: terraform init -upgrade -input=false -backend-config=key="$BACKEND_STATE_NAME" -backend-config=storage_account_name="$BACKEND_STORAGE_ACCOUNT_NAME" -backend-config=container_name="$BACKEND_STORAGE_CONTAINER_NAME" -backend-config=resource_group_name="$BACKEND_STORAGE_RESOURCE_GROUP" -backend-config=subscription_id="${{ secrets.AZURE_SUBSCRIPTION_ID }}" -backend-config=tenant_id="${{ secrets.AZURE_TENANT_ID }}" -backend-config=client_id="${{ secrets.SP_CLIENT_ID }}" -backend-config=client_secret="${{ secrets.SP_CLIENT_SECRET }}"
      env:
        BACKEND_STORAGE_RESOURCE_GROUP: ${{ env.BACKEND_STORAGE_RESOURCE_GROUP }}
        BACKEND_STORAGE_ACCOUNT_NAME: ${{ env.BACKEND_STORAGE_ACCOUNT_NAME }}
        BACKEND_STORAGE_CONTAINER_NAME: ${{ env.BACKEND_STORAGE_CONTAINER_NAME }}
        BACKEND_STATE_NAME: ${{ env.BACKEND_STATE_NAME }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -out pgoinc.tfplan
      env:
        AAD_SERVICE_PRINCIPAL_CLIENT_ID: ${{ secrets.SP_CLIENT_ID }}
        AAD_SERVICE_PRINCIPAL_CLIENT_SECRET: ${{ secrets.SP_CLIENT_SECRET }}

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false
